from abc import ABC, abstractmethod

import yaml
from airflow import DAG
from airflow.decorators import task
from airflow.providers.standard.operators.trigger_dagrun import TriggerDagRunOperator


class BaseDAGFactory(ABC):
    """
    Abstract base class for DAG factory implementations.

    Inherit from this class to create a factory that generates Airflow DAGs from configuration files.
    Subclasses must implement:
        - `create_dag_template`: Defines the logic for creating a single DAG.
        - `dag_arguments_generator`: Yields argument dictionaries for each DAG to be created.

    Args:
        configs_path (str): Path to a YAML file containing configuration for the DAGs to be created.

    Usage:
        1. Inherit from BaseDAGFactory.
        2. Implement the `create_dag_template` method in your subclass. The implementation must return a DAG object.
        3. Implement the `dag_arguments_generator` method to yield argument dicts for each DAG (must include 'dag_id').
        4. Use `create_dags` to register all DAGs in the global namespace for Airflow discovery.
        5. Optionally, implement `create_master_dag` to create a DAG that triggers all generated DAGs.
    """

    def __init__(self, configs_path: str):
        self.configs = self.get_configs(configs_path)
        self.dag_ids = [dag_args["dag_id"] for dag_args in self.dag_arguments_generator()]

    @staticmethod
    def get_configs(configs_path: str) -> dict:
        """
        Load and parse the YAML configuration file.

        Args:
            configs_path (str): Path to the YAML file.

        Returns:
            dict: Parsed configuration dictionary.
        """
        with open(configs_path) as f:
            configs = yaml.safe_load(f)
        return configs

    @abstractmethod
    def create_dag_template(self, **kwargs) -> DAG:
        """
        Abstract method to define the logic for creating a single DAG.

        Subclasses must implement this method to return a DAG object based on provided arguments.

        Args:
            **kwargs: Arbitrary keyword arguments required for DAG creation.

        Returns:
            DAG: The created DAG object.
        """
        raise NotImplementedError(
            "create_dag_template() needs to be implemented for every subclass of BaseDAGFactory."
        )

    @abstractmethod
    def dag_arguments_generator(self, **kwargs):
        """
        Abstract generator method to yield argument dictionaries for DAG creation.

        Each yielded dict must contain at least a 'dag_id' key and any other arguments required by
        `create_dag_template`.

        Yields:
            dict: Arguments to be passed to `create_dag_template` for each DAG.

        Example:
            def dag_arguments_generator(self):
                for index in self.configs:
                    yield {
                        "dag_id": f"extract_{index}_holdings",
                        "index": index,
                        "default_args": default_args,
                        "schedule": self.configs.get(index).get("schedule", None)
                    }
        """
        raise NotImplementedError(
            "dag_arguments_generator() needs to be implemented for every subclass of BaseDAGFactory."
        )

    def create_dags(self) -> None:
        """
        Create and register multiple DAGs in the global namespace based on the arguments generated by
        dag_arguments_generator.

        This method will call `create_dag_template` for each DAG ID and register the resulting DAG
        in the global namespace, making it discoverable by Airflow.
        """
        for dag_args in self.dag_arguments_generator():
            globals()[dag_args["dag_id"]] = self.create_dag_template(**dag_args)

    def create_master_dag(self, master_dag_id: str, default_args=None) -> None:
        """
        Create a master DAG that triggers all DAGs listed in dags_ids.

        Args:
            master_dag_id (str): The DAG ID for the master DAG.
            default_args (dict): Default arguments for the master DAG.

        Returns:
            None
        """
        master_dag = DAG(
            dag_id=master_dag_id,
            default_args=default_args or {},
            tags=["master"],
        )

        with master_dag:

            @task()
            def start_task():
                return None

            @task()
            def end_task():
                return None

            start_task = start_task()
            end_task = end_task()
            trigger_tasks = []
            for dag_id in self.dag_ids:
                trigger = TriggerDagRunOperator(
                    task_id=f"trigger_{dag_id}",
                    trigger_dag_id=dag_id,
                )
                trigger_tasks.append(trigger)

            start_task >> trigger_tasks >> end_task

        globals()[master_dag_id] = master_dag
